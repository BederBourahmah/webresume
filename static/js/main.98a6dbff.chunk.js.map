{"version":3,"sources":["downloadables/Resume of Beder Bourahmah.pdf","downloadables/Cover Letter of Beder Bourahmah.pdf","Components/Education/Education.tsx","Components/BigScreen/BigScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Education","Col","Row","className","React","Component","BigScreen","basename","process","Navbar","to","NavbarBrand","Nav","NavLink","UncontrolledDropdown","inNavbar","DropdownToggle","nav","caret","DropdownMenu","right","DropdownItem","href","Resume","target","CoverLetter","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,uD,mBCA3CD,EAAOC,QAAU,IAA0B,6D,+WCItBC,G,uLAEjB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,oBAAf,sBAGA,kBAACD,EAAA,EAAD,CAAKC,UAAU,kBAAf,mKAGA,kBAACD,EAAA,EAAD,CAAKC,UAAU,oBAAf,oCAGA,kBAACD,EAAA,EAAD,CAAKC,UAAU,kBAAf,4R,GAb+BC,IAAMC,YCIxBC,E,iLAEjB,OACE,kBAAC,IAAD,CAAYC,SAAUC,cACpB,kBAACC,EAAA,EAAD,CAAQN,UAAU,cAClB,kBAAC,IAAD,CAAMA,UAAU,eAAeO,GAAIF,cAAwB,kBAACG,EAAA,EAAD,4BAC3D,kBAACC,EAAA,EAAD,CAAKT,UAAU,uBACb,kBAAC,IAAD,CAAMA,UAAU,eAAeO,GAAG,cAAa,kBAACG,EAAA,EAAD,mBAC/C,kBAACC,EAAA,EAAD,CAAsBC,UAAQ,GAC5B,kBAACC,EAAA,EAAD,CAAgBC,KAAG,EAACC,OAAK,EAACf,UAAU,gBAApC,aAGA,kBAACgB,EAAA,EAAD,CAAcC,OAAK,EAACjB,UAAU,oBAC5B,kBAACkB,EAAA,EAAD,CAAcC,KAAMC,IAAQC,OAAO,SAASrB,UAAU,gBAAtD,cAGA,kBAACkB,EAAA,EAAD,CAAcC,KAAMG,IAAaD,OAAO,SAASrB,UAAU,gBAA3D,wBAQR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuB,KAAK,cACV,kBAAC,EAAD,a,GA1B6BtB,IAAMC,WCC9BsB,EANO,WACpB,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.98a6dbff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Resume of Beder Bourahmah.5f80aed6.pdf\";","module.exports = __webpack_public_path__ + \"static/media/Cover Letter of Beder Bourahmah.dd520a83.pdf\";","import React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport './Education.css';\r\n\r\nexport default class Education extends React.Component {\r\n  render() {\r\n    return (\r\n      <Col>\r\n        <Row className=\"Education-header\">\r\n          Miami Dade College\r\n        </Row>\r\n        <Row className=\"Education-body\">\r\n          I attended Miami Dade College from the Fall Semester 2008 to the Summer Semester 2010. While enrolled at MDC I earned 63 credits with a cumulative GPA of 3.68.\r\n        </Row>\r\n        <Row className=\"Education-header\">\r\n          Florida International University\r\n        </Row>\r\n        <Row className=\"Education-body\">\r\n          I attended Florida International University from the Fall Semester 2010 to the Spring Semester 2013. While enrolled at FIU I earned 95 credits with a cumulative GPA of 3.27.\r\n          I graduated in April, 2013, receiving my Bachelor of Science degree in Electrical Engineering degree.\r\n        </Row>\r\n      </Col>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport { Navbar, NavbarBrand, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, NavLink, Nav } from 'reactstrap';\r\nimport Resume from \"../../downloadables/Resume of Beder Bourahmah.pdf\";\r\nimport CoverLetter from \"../../downloadables/Cover Letter of Beder Bourahmah.pdf\";\r\nimport './BigScreen.css';\r\nimport { Link, Switch, Route, HashRouter } from \"react-router-dom\";\r\nimport Education from '../Education/Education';\r\n\r\nexport default class BigScreen extends React.Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename={process.env.PUBLIC_URL}>\r\n        <Navbar className=\"App-navbar\">\r\n        <Link className=\"App-navLinks\" to={process.env.PUBLIC_URL}><NavbarBrand >Beder's Web Resume</NavbarBrand></Link>\r\n        <Nav className=\"NavigationBar-items\" >\r\n          <Link className=\"App-navLinks\" to=\"/education\"><NavLink>Education</NavLink></Link>\r\n          <UncontrolledDropdown inNavbar>\r\n            <DropdownToggle nav caret className=\"App-navLinks\">\r\n              Downloads\r\n            </DropdownToggle>\r\n            <DropdownMenu right className=\"App-dropdownMenu\">\r\n              <DropdownItem href={Resume} target='_blank' className=\"App-navLinks\">\r\n                PDF Resume\r\n              </DropdownItem >\r\n              <DropdownItem href={CoverLetter} target='_blank' className=\"App-navLinks\">\r\n                PDF Cover Letter\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledDropdown>\r\n        </Nav>\r\n      </Navbar>\r\n\r\n      <Switch>\r\n        <Route path=\"/education\">\r\n          <Education />\r\n        </Route>\r\n      </Switch>\r\n    </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport BigScreen from \"./Components/BigScreen/BigScreen\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <BigScreen />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}